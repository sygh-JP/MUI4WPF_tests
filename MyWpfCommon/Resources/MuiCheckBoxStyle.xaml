<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    >
    <!-- MUI4WPF 既定のテンプレートだと GUI 標準から外れてしまうので、微修正をかける。暗黙のスタイルとするため、キー名は付けない。 -->
    <Style TargetType="{x:Type CheckBox}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Background" Value="{DynamicResource ButtonBackground}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource ButtonBorder}"/>
        <Setter Property="Foreground" Value="{DynamicResource WindowText}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Grid x:Name="LayoutRoot" Margin="{TemplateBinding Padding}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="16"/>
                            <ColumnDefinition Width="4"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Rectangle Grid.ColumnSpan="3" Fill="Transparent"/>
                        <Border x:Name="CheckBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Height="16" Width="16">
                            <Grid>
                                <Path x:Name="CheckMark" Data="F1M15,21L22,28 32.9999,14.0001 35.9999,17.0001 22,34 12.0001,24 15,21z" Fill="{TemplateBinding Foreground}" Width="10" Height="10" Margin="2" Stretch="Fill" Visibility="Collapsed"/>
                                <Rectangle x:Name="Indeterminate" Fill="{TemplateBinding Foreground}" Width="8" Height="8" Margin="4" Visibility="Hidden"/>
                            </Grid>
                        </Border>
                        <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Grid.Column="2" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsThreeState, RelativeSource={RelativeSource Self}}" Value="True"/>
                                <Condition Binding="{Binding IsChecked, RelativeSource={RelativeSource Self}}" Value="{x:Null}"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Visibility" TargetName="CheckMark" Value="Collapsed"/>
                            <Setter Property="Visibility" TargetName="Indeterminate" Value="Visible"/>
                        </MultiDataTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource ButtonTextDisabled}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Visibility" TargetName="CheckMark" Value="Visible"/>
                            <Setter Property="Visibility" TargetName="Indeterminate" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="CheckBorder" Value="{DynamicResource ButtonBackgroundHover}"/>
                            <Setter Property="BorderBrush" TargetName="CheckBorder" Value="{DynamicResource ButtonBorderHover}"/>
                            <Setter Property="Fill" TargetName="CheckMark" Value="{DynamicResource ButtonTextHover}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="CheckBorder" Value="{DynamicResource ButtonBackgroundPressed}"/>
                            <Setter Property="BorderBrush" TargetName="CheckBorder" Value="{DynamicResource ButtonBorderPressed}"/>
                            <Setter Property="Fill" TargetName="CheckMark" Value="{DynamicResource ButtonTextPressed}"/>
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="BorderBrush" TargetName="CheckBorder" Value="{DynamicResource Accent}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type RadioButton}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Foreground" Value="{DynamicResource WindowText}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Grid x:Name="LayoutRoot" Margin="{TemplateBinding Padding}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="16"/>
                            <ColumnDefinition Width="4"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Rectangle Grid.ColumnSpan="3" Fill="Transparent"/>
                        <!-- HACK: ButtonBorder は、Dark テーマでは WindowBackground とほぼ同じなので、視認性が悪い。 -->
                        <!-- https://mui.codeplex.com/wikipage?title=Theme%20resource%20reference&referringTitle=Documentation -->
                        <Ellipse x:Name="CheckBorder" Stroke="{DynamicResource ButtonBorder}" StrokeThickness="1" Fill="{DynamicResource ButtonBackground}" Width="16" Height="16"/>
                        <Ellipse x:Name="CheckMark" Fill="{TemplateBinding Foreground}" Width="8" Height="8" Visibility="Collapsed"/>
                        <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Grid.Column="2" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource ButtonTextDisabled}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Visibility" TargetName="CheckMark" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Fill" TargetName="CheckBorder" Value="{DynamicResource ButtonBackgroundHover}"/>
                            <Setter Property="Stroke" TargetName="CheckBorder" Value="{DynamicResource ButtonBorderHover}"/>
                            <Setter Property="Fill" TargetName="CheckMark" Value="{DynamicResource ButtonTextHover}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Fill" TargetName="CheckBorder" Value="{DynamicResource ButtonBackgroundPressed}"/>
                            <Setter Property="Stroke" TargetName="CheckBorder" Value="{DynamicResource ButtonBorderPressed}"/>
                            <Setter Property="Fill" TargetName="CheckMark" Value="{DynamicResource ButtonTextPressed}"/>
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="Stroke" TargetName="CheckBorder" Value="{DynamicResource Accent}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>