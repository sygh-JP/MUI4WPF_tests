<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    >
    <!-- 外観を完全に自前で定義するので、BasedOn の指定は不要。 -->
    <Style x:Key="MuiListViewItemStyleKey" TargetType="ListViewItem">
        <!-- Stretch 指定はアイテムのアライメント指定をできるようにするために必要。 -->
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <!-- ListBox や ListView では、Ctrl キーを押しながら上下矢印キーを押すと、選択状態を変えずにフォーカス（カーソル）だけを動かすことができる。さらに、スペースキーで選択・選択解除ができる。これにより、キーボードだけで飛び飛びの選択をしたり、選択を解除したりすることもできる。しかし MUI4WPF デフォルトでは FocusVisualStyle が空 {x:Null} になっていてフォーカスが見えないので、適切な Style を明示的に設定する。 -->
        <Setter Property="FocusVisualStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Rectangle IsHitTestVisible="False" StrokeThickness="1" SnapsToDevicePixels="True" Stroke="{DynamicResource Accent}"/>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBoxItem">
                    <!-- Margin は使わない。マウスオーバーに反応しない隙間を作らないようにするため。 -->
                    <Border x:Name="ListBoxItemControlTemplateBorder" Padding="1" BorderThickness="1" BorderBrush="Transparent">
                        <GridViewRowPresenter />
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="False"/>
                                <Condition Property="IsSelected" Value="False"/>
                            </MultiTrigger.Conditions>
                            <!-- Transparent を指定すれば交差判定が発生する。 -->
                            <Setter TargetName="ListBoxItemControlTemplateBorder" Property="Background" Value="Transparent"/>
                        </MultiTrigger>
                        <!-- 偶数行は（前景色とのコントラストを保てる範囲内で）背景色を若干濃くする。 -->
                        <!-- 親要素の AlternationCount プロパティと自身の AlternationIndex 添付プロパティをチェック。 -->
                        <!-- ただし以下ではダメ。
                        <Condition Property="ItemsControl.AlternationIndex" Value="0"/>
                        -->
                        <!-- HACK: 先頭-末尾のスクロールを素早く繰り返すと、色分けがずれてしまうバグがある模様。つまり AlternationIndex がずれている。WPF 側の問題らしい。仮想化していることが関与している模様。.NET 4.6.1 でも修正されていない。この点 Win32/MFC/WinForms のほうがマシとはどういうことか…… -->
                        <!-- ずれが発生すると気持ち悪いので封印する。仮想化する場合は Buggy な AlternationIndex を使うべきではなさそう。VM にインデックス番号を持たせて参照するのが確実かつベスト。せっかく MS Connect に登録したチケットを勝手に削除するような、不具合報告に真摯な対応をしない会社にわざわざ時間をとって報告してやるのもバカバカしい。 -->
                        <!--
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=AlternationCount, Mode=OneWay, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ItemsControl}}}" Value="2"/>
                                <Condition Binding="{Binding Path=(ItemsControl.AlternationIndex), Mode=OneWay, RelativeSource={RelativeSource Self}}" Value="0"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="ListBoxItemControlTemplateBorder" Property="Background" Value="#30000000"/>
                        </MultiDataTrigger>
                        -->
                        <!-- "Accent" だと主張が強すぎる（Dark テーマのとき白色文字との相性が悪い）ので、半透明の "WindowBorder" に抑える。 -->
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="ListBoxItemControlTemplateBorder" Property="Background" Value="{DynamicResource WindowBorder}"/>
                            <!-- Selector.IsSelectionActive のチェックは不要。アクティブだろうが非アクティブだろうが関係なく選択行は常に同じ背景色に変更する。 -->
                        </Trigger>
                        <!-- MUI4WPF 既定だと、Dark テーマのとき、リスト行に入った CheckBox をマウスオーバーしたときにリスト行の背景と同化して分かりづらい。 -->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="ListBoxItemControlTemplateBorder" Property="Background" Value="{DynamicResource Accent}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource ItemTextDisabled}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- MUI4WPF の "FirstFloor.ModernUI/Shared/Assets/ListBox.xaml" の FlatListBoxItem を参考にした。 -->
    <Style x:Key="MuiListBoxItemStyleKey" TargetType="ListBoxItem">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource ItemText}" />
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="FocusVisualStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Rectangle IsHitTestVisible="False" StrokeThickness="1" SnapsToDevicePixels="True" Stroke="{DynamicResource Accent}"/>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBoxItem">
                    <Border Name="ListBoxItemControlTemplateBorder"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Padding="{TemplateBinding Padding}"
                            SnapsToDevicePixels="True">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="False"/>
                                <Condition Property="IsSelected" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ListBoxItemControlTemplateBorder" Property="Background" Value="Transparent"/>
                        </MultiTrigger>
                        <!--
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=AlternationCount, Mode=OneWay, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ItemsControl}}}" Value="2"/>
                                <Condition Binding="{Binding Path=(ItemsControl.AlternationIndex), Mode=OneWay, RelativeSource={RelativeSource Self}}" Value="0"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="ListBoxItemControlTemplateBorder" Property="Background" Value="#30000000"/>
                        </MultiDataTrigger>
                        -->
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="ListBoxItemControlTemplateBorder" Property="Background" Value="{DynamicResource WindowBorder}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="ListBoxItemControlTemplateBorder" Property="Background" Value="{DynamicResource Accent}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource ItemTextDisabled}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>